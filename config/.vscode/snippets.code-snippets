{
	// Place your competitive programming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"cp_cpp_start": {
		"prefix": "cp_start",
		"scope": "c++, cpp",
		"body": [
			"#include <bits/stdc++.h>"
			,""
			,"using namespace std;"
			,"#define all(x) (x).begin(), (x).end()"
			,"typedef vector<bool> vb;"
			,"typedef vector<int> vi;"
			,"typedef vector<long long> vl;"
			,"typedef vector<vector<bool>> vvb;"
			,"typedef vector<vector<int>> vvi;"
			,"typedef vector<vector<long long>> vvl;"
			,"typedef pair<int,int> pii;"
			,"typedef long long ll;"
			,""
			,""
			,"int main(){"
			,"\tios::sync_with_stdio(false);"
			,"\tcin.tie(0);"
			,"\tint nt,it;"
			,"\tcin >> nt;"
			,"\tfor(it=1;it<=nt;it++){"
			,"\t}"
			,"\treturn 0;"
			,"}"
		]
        ,
        "description": "Competitive Programming starting code."
	}
}